% Nov 5, 2020clear allclose all% ---- FILTRAGGIO 1D ------% We can have two main type of filters: passa-basso, filtro gaussiano,% passa-altodx = 0.01;d = 0.2;x = -3:dx:3;figure% for d = 1:-0.05:0.05    y = double(abs(x)<d)    subplot(2,1,1), plot(x,y), grid, axis([-3 3 -1 2]) % axis to increase the visualization interval    % Applying fourrier transform     Y = fftshift(fft(y));    V = linspace(-0.5,0.5, length(Y));  % Generating numeric frequencies    subplot(2,1,2), plot(V, abs(Y)), grid    %   pause(0.5);%   drawnow      % Makes sure that Matlab draws every single graph% end% ---------- LOW-PASS FILTER LPF (FILTRO PASSA-BASSO) ----------% This filter cancels some areas(low frequency areas) of my signal. % How can I do this? By multiplyinh by a frequency rectangle 'H' which will have% side of lenght 'D'D = 0.1;         % it tells me how big is my rectanglefigure% for D=0.3:-0.02:0,02H = double(abs(V)<D);% I need to 'normalize' the function Y because otherwise will be way to big% compare to our rectangle. I can achieve this by dividing by its maximum,% which ./max(abs(Y). What it means? max/max = 1!subplot(2,1,1), plot(V, abs(Y)./max(abs(Y))), grid, hold on, plot(V, H, 'k'), axis([-0.5 0.5 -0.1 1.1]), hold off% Declaring a function which we are applying the filter "passa-basso"Yf = Y.*H;                           % Filter passa-bassoyf = real(ifft(ifftshift(Yf)));subplot(2,1,2), plot(x,y), grid, hold on, plot(x, yf, 'r'), axis([-1 1 -0.5 1.5]), hold off% drawnow% pause(0.25)% end% ---------- GAUSSIAN FILTER PASSA-BASSO ----------s2 = 0.001;                  % sigma of the gaussian functionHg = exp(-(V.^2)/(2*s2))figuresubplot(2,1,1), plot(V, abs(Y)./max(abs(Y))), grid, hold on, plot(V, Hg, 'k'), axis([-0.5 0.5 -0.1 1.1]), hold offYf = Y.*Hg;                          yf = real(ifft(ifftshift(Yf)));subplot(2,1,2), plot(x,y), grid, hold on, plot(x, yf, 'r'), axis([-1 1 -0.5 1.5]), hold off% ---------- HIGH PASS FILTER HPF (FILTRO PASSA-ALTO)----------% We usually use this filter by summing to the original image% I can provide a better border visualization by adding '2'H_hpf = 1 - double(abs(V)<D);        % high-pass filter % H_hpf = 2 - double(abs(V)<D);      % border improvement != HPFfiguresubplot(2,1,1), plot(V, abs(Y)./max(abs(Y))), grid, hold on, plot(V, H_hpf, 'k'), axis([-0.5 0.5 -0.1 1.1]), hold offYf_hpf = Y.*H_hpf;                           yf_hpf = real(ifft(ifftshift(Yf_hpf)));subplot(2,1,2), plot(x,y), grid, hold on, plot(x, yf_hpf, 'r'), axis([-1 1 -0.5 1.5]), hold off% ---------- GAUSSIAN HIGH-PASS FILTER ----------Hg_hpf = 1-exp(-(V.^2)/(2*s2));figuresubplot(2,1,1), plot(V, abs(Y)./max(abs(Y))), grid, hold on, plot(V, Hg_hpf, 'k'), axis([-0.5 0.5 -0.1 1.1]), hold offYfg_hpf = Y.*Hg_hpf;                           yfg_hpf = real(ifft(ifftshift(Yfg_hpf)));subplot(2,1,2), plot(x,y), grid, hold on, plot(x, yfg_hpf, 'r'), axis([-1 1 -0.5 1.5]), hold off